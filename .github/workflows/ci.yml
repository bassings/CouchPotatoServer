name: CI

on:
  push:
    branches: [ master, v2-to-v3-upgrade ]
  pull_request:
    branches: [ master, v2-to-v3-upgrade ]

jobs:
  tests:
    name: Unit + Integration (Py${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.12', '3.13' ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install tox
        run: |
          python -m pip install --upgrade pip
          pip install tox pip-tools

      - name: Compile requirements (artifact)
        run: |
          if [ -f requirements.in ]; then
            pip-compile --generate-hashes -o requirements.txt requirements.in || pip-compile -o requirements.txt requirements.in || echo "pip-compile failed; continuing without compiled lock"
          fi

      - name: Upload compiled requirements
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: requirements-compiled-${{ matrix.python-version }}
          path: requirements.txt

      - name: Run tox env
        run: |
          PYVER=${{ matrix.python-version }}
          ENV_NAME=py${PYVER/./}
          echo "Running tox -e ${ENV_NAME}"
          tox -q -e ${ENV_NAME} -- -q -ra --junitxml=pytest-report.xml

      - name: Upload pytest report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-report-${{ matrix.python-version }}
          path: pytest-report.xml
      - name: Print pytest summary
        if: always()
        run: |
          python scripts/print_pytest_summary.py || true

      - name: Upload coverage to Coveralls
        if: github.ref == 'refs/heads/master' && always()
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  docker-e2e:
    name: Docker E2E (Python 3 image)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        run: |
          docker build -f Dockerfile.python3 -t couchpotato:py3 .

      - name: Run container
        run: |
          docker run -d --name couchpotato -p 5050:5050 couchpotato:py3
          # Wait for the server to respond
          for i in $(seq 1 30); do
            if curl -fsS http://localhost:5050/ >/dev/null 2>&1; then
              echo "Server is up"; break; fi; sleep 1; done

      - name: Healthcheck script
        run: |
          python -m pip install --upgrade pip
          python couchpotato/simple_healthcheck.py

      - name: Container logs (on failure)
        if: failure()
        run: |
          docker logs couchpotato || true
          docker inspect couchpotato || true

      - name: Cleanup
        if: always()
        run: |
          docker rm -f couchpotato || true

  build-artifacts:
    name: Build sdist/wheel
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Build package
        run: |
          python -m pip install --upgrade pip build
          python -m build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts
          path: dist/*
