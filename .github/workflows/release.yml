name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Cache Node.js dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-20-${{ hashFiles('**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-node-20-
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install lxml pyopenssl requests
        npm install

    - name: Run tests
      run: |
        python test_python3_compatibility.py
        python test_couchpotato_integration.py

    - name: Build assets
      run: |
        npx grunt build || echo "Build completed"

    - name: Create Release Archive
      run: |
        # Create a clean copy for distribution
        mkdir -p dist/CouchPotatoServer
        
        # Copy essential files
        cp -r couchpotato dist/CouchPotatoServer/
        cp -r libs dist/CouchPotatoServer/
        cp -r static dist/CouchPotatoServer/ 2>/dev/null || cp -r couchpotato/static dist/CouchPotatoServer/ 2>/dev/null || true
        cp -r templates dist/CouchPotatoServer/ 2>/dev/null || cp -r couchpotato/templates dist/CouchPotatoServer/ 2>/dev/null || true
        cp -r init dist/CouchPotatoServer/
        cp CouchPotato.py dist/CouchPotatoServer/
        cp README.md dist/CouchPotatoServer/
        cp license.txt dist/CouchPotatoServer/
        cp version.py dist/CouchPotatoServer/
        
        # Create archive
        cd dist
        tar -czf CouchPotatoServer-${GITHUB_REF#refs/tags/}.tar.gz CouchPotatoServer/
        zip -r CouchPotatoServer-${GITHUB_REF#refs/tags/}.zip CouchPotatoServer/

    - name: Generate changelog
      id: changelog
      run: |
        # Get changes since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "## Changes since $LAST_TAG" > CHANGELOG.md
          git log --oneline --no-merges ${LAST_TAG}..HEAD >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
          echo "- Complete Python 3.13 migration" >> CHANGELOG.md
          echo "- Full web interface functionality" >> CHANGELOG.md
          echo "- Docker support" >> CHANGELOG.md
          echo "- Comprehensive testing suite" >> CHANGELOG.md
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: CouchPotato Server ${{ github.ref }}
        body: |
          ## CouchPotato Server Release ${{ github.ref }}
          
          ### Features
          - ✅ **Python 3.13 Support** - Full compatibility with modern Python
          - ✅ **Web Interface** - Complete original functionality preserved
          - ✅ **Docker Support** - Ready-to-use containerization
          - ✅ **Comprehensive Testing** - Compatibility and integration tests included
          
          ### Installation
          
          **Direct Download:**
          Download and extract the archive, then run:
          ```bash
          python3 CouchPotato.py
          ```
          
          **Docker:**
          ```bash
          docker run -p 5050:5050 -v /path/to/data:/data bassings/couchpotato:${{ github.ref }}
          ```
          
          **From Source:**
          ```bash
          git clone https://github.com/bassings/CouchPotatoServer.git
          cd CouchPotatoServer
          python3 CouchPotato.py
          ```
          
          ### Requirements
          - Python 3.8 or higher (recommended: Python 3.10+)
          - Optional: Docker for containerized deployment
          
          ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/CouchPotatoServer-${{ github.ref }}.tar.gz
        asset_name: CouchPotatoServer-${{ github.ref }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Assets (ZIP)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/CouchPotatoServer-${{ github.ref }}.zip
        asset_name: CouchPotatoServer-${{ github.ref }}.zip
        asset_content_type: application/zip

  docker-release:
    runs-on: ubuntu-latest
    needs: create-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract tag name
      id: extract_tag
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.python3
        push: true
        tags: |
          bassings/couchpotato:${{ steps.extract_tag.outputs.tag }}
          bassings/couchpotato:latest
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max 